from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.dispatcher.filters import Text
import asyncio

from config import TOKEN

import news_check
import top_authors
import mailing
import add_author

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class TelegramError(Exception):
    """–ö–ª–∞—Å—Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è."""


def check_tokens():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    if TOKEN is None:
        raise TelegramError('API_TOKEN –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')


async def send_start_menu(message: types.Message):
    but1 = KeyboardButton(text="–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
    but2 = KeyboardButton(text="–∞–≤—Ç–æ—Ä—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —É—Ä–æ–≤–Ω–µ–º –¥–æ–≤–µ—Ä–∏—è")
    but3 = KeyboardButton(text="—Ä–∞—Å—Å—ã–ª–∫–∞")

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(but1).add(but2).add(but3)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.send_message(message.chat.id, "* üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å * \n"
                                            "* üì¢ –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help *\n"
                                            "* ‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫: *",
                           reply_markup=keyboard)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message_handler(commands="start")
async def process_start_command(message: types.Message):
    asyncio.get_running_loop().create_task(send_start_menu(message))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await bot.send_message(message.chat.id, '''–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:
    * üì∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏(–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –≤ —á–∞—Ç –∏ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–µ) *
    * üîù –∞–≤—Ç–æ—Ä—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —É—Ä–æ–≤–Ω–µ–º –¥–æ–≤–µ—Ä–∏—è(–ë–æ—Ç –≤—ã–≤–µ–¥–µ—Ç —Ç–æ–ø 10 –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤) *
    * ‚úâ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É(–ë–æ—Ç –±—É–¥–µ—Ç –æ–ø–æ–≤–µ—â–∞—Ç—å –≤–∞—Å –æ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö) *''')


# –ö–ª–∞—Å—Å —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
class ms_to_users(StatesGroup):
    text = State()


@dp.message_handler(Text(equals="–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"))
async def process_help_command(message: Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –≤ —á–∞—Ç —Å–≤–æ—é –Ω–æ–≤–æ—Å—Ç—å. –§–æ—Ä–º–∞—Ç:–∞–≤—Ç–æ—Ä Text: –Ω–æ–≤–æ—Å—Ç—å. –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∞–≤—Ç–æ—Ä, —É–∫–∞–∑—ã–≤–∞—Ç—å nn')
    await ms_to_users.text.set()


@dp.message_handler(state=ms_to_users.text)
async def process_name(message: types.Message, state: FSMContext):
    await message.answer('‚è± –ù–æ–≤–æ—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è')
    name_author, text_pred = message.text.split(" Text: ")
    pred_result = news_check.pred(text_pred)
    if pred_result:
        await message.answer('‚úî –ù–æ–≤–æ—Å—Ç—å —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–∞–≤–¥–∏–≤–∞—è')
    else:
        await message.answer('‚ùå –ù–æ–≤–æ—Å—Ç—å —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ª–æ–∂–Ω–∞—è')
    add_author.add_user(name_author, pred_result)
    for_send = mailing.get_users()
    for i in for_send:
        if i != message.chat.id:
            await bot.send_message(i, message.text)
            if pred_result:
                await bot.send_message(i, '‚úî –ù–æ–≤–æ—Å—Ç—å —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–∞–≤–¥–∏–≤–∞—è')
            else:
                await bot.send_message(i, '‚ùå –ù–æ–≤–æ—Å—Ç—å —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ª–æ–∂–Ω–∞—è')
    await ms_to_users.next()


@dp.message_handler(Text(equals="–∞–≤—Ç–æ—Ä—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —É—Ä–æ–≤–Ω–µ–º –¥–æ–≤–µ—Ä–∏—è"))
async def process_help_command(message: Message):
    auth = top_authors.checklist()
    for i in range(len(auth)):
        await message.answer(f'''{i + 1}) –ò–º—è: {auth[i][0]}; –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–¥–∏–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {auth[i][1][0]}''')


@dp.message_handler(Text(equals="—Ä–∞—Å—Å—ã–ª–∫–∞"))
async def process_help_command(message: Message):
    if mailing.check_user_in_base(message.chat.id):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton(text="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"))
    else:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"))
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.message_handler(Text(equals="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"))
async def process_help_command(message: Message):
    mailing.add_user(message.chat.id)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton(text="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"))
    await bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ!", reply_markup=keyboard)
    asyncio.get_running_loop().create_task(send_start_menu(message))


@dp.message_handler(Text(equals="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"))
async def process_help_command(message: Message):
    mailing.del_user(message.chat.id)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton(text="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"))
    await bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ!", reply_markup=keyboard)
    asyncio.get_running_loop().create_task(send_start_menu(message))


@dp.message_handler()
async def echo_message(msg: types.Message):
    await bot.send_message(msg.from_user.id, msg.text)


if __name__ == '__main__':
    check_tokens()
    executor.start_polling(dp)
